syntax = "proto3";

//import "google/api/http.proto";

option java_multiple_files = true;
option java_package = "org.sustain.census";
option java_outer_classname = "SustainCensus";

package census;

service Census {
  // spatial query with MongoDB support
  rpc SpatialQuery (SpatialRequest) returns (stream SpatialResponse) {}

  // Query Open Street Map Data
  rpc OsmQuery (OsmRequest) returns (stream OsmResponse) {}

  // Query datasets (hospitals, dams, natural_gas_pipelines, power_plants, transmission_lines, etc.
  rpc DatasetQuery (DatasetRequest) returns (stream DatasetResponse) {}

  // targeted queries - return geographical areas that satisfy a given value range of a census feature
  // Example 1: Retrieve all counties where (population >= 1,000,000)
  // Example 2: Retrieve all tracts where (median household income < $50,000/year)
  rpc ExecuteTargetedCensusQuery (TargetedCensusRequest) returns (stream TargetedCensusResponse) {}
}

message DatasetRequest {
  enum Dataset {
    HOSPITALS = 0;
    DAMS = 1;
    ELECTRICAL_SUBSTATIONS = 2;
    TRANSMISSION_LINES = 3;
    NATURAL_GAS_PIPELINES = 4;
    POWER_PLANTS = 5;
  }
  Dataset dataset = 1;
  string requestGeoJson = 2;
  SpatialOp spatialOp = 3;
  map<string, string> requestParams = 4;
}

message DatasetResponse {
  string response = 1;
}

message OsmRequest {
  enum Dataset {
    POINTS = 0;
    LINES = 1;
    MULTI_LINES = 2;
    MULTI_POLYGONS = 3;
  }
  Dataset dataset = 1;
  string requestGeoJson = 2;
  SpatialOp spatialOp = 3;
  map<string, string> requestParams = 4;
}

message OsmResponse {
  string response = 1;
}

message SpatialRequest {
  CensusResolution censusResolution = 1;
  CensusFeature censusFeature = 2;
  string requestGeoJson = 3; // bounding polygon
  SpatialOp spatialOp = 4;
}

message SpatialResponse {
  string data = 1;
  string responseGeoJson = 2; // geoJson associated with 'data'
}

enum SpatialOp {
  GeoWithin = 0;
  GeoIntersects = 1;
}

enum CensusFeature {
  TotalPopulation = 0;
  MedianHouseholdIncome = 1;
  PopulationByAge = 2;
  MedianAge = 3;
  Poverty = 4;
  Race = 5;
}

enum IntraDatasetOp {
  INTERSECTION = 0;
  UNION = 1;
  OVERLAP = 2;
}

message DatasetEntry {
  string entry = 1;
}

message TargetedCensusRequest {
  CensusResolution resolution = 1;
  Predicate predicate = 2;
  SpatialOp spatialOp = 3;
  string requestGeoJson = 4; // bounding polygon
}

message TargetedCensusResponse {
  SpatialResponse spatialResponse = 1;
}

enum CensusResolution {
  State = 0;
  County = 1;
  Tract = 2;
}

enum Decade {
  _2010 = 0;
  _2000 = 1;
  _1990 = 2;
  _1980 = 3;
}

message Predicate {
  enum ComparisonOperator {
    EQUAL = 0;
    GREATER_THAN = 1;
    LESS_THAN = 2;
    GREATER_THAN_OR_EQUAL = 3;
    LESS_THAN_OR_EQUAL = 4;
  }
  CensusFeature censusFeature = 1;
  Decade decade = 2;
  ComparisonOperator comparisonOp = 3;
  double comparisonValue = 4;
}

