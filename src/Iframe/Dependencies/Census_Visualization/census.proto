syntax = "proto3";
//option objc_class_prefix = "";

option java_package = "org.sustain.census";
option java_outer_classname = "SustainCensus";
//option objc_class_prefix = "";

package census;

service Census {
  rpc GetTotalPopulation (TotalPopulationRequest) returns (TotalPopulationResponse) {}
  rpc GetMedianAge (MedianAgeRequest) returns (MedianAgeResponse) {}
  rpc GetMedianHouseholdIncome (MedianHouseholdIncomeRequest) returns (MedianHouseholdIncomeResponse) {}
  rpc GetPopulationByAge (PopulationByAgeRequest) returns (PopulationByAgeResponse) {}
  rpc GetPoverty (PovertyRequest) returns (PovertyResponse) {}
  rpc GetRace (RaceRequest) returns (RaceResponse) {}

  rpc SpatialQuery(SpatialRequest) returns (SpatialResponse) {}

  // targeted queries - return geographical areas that satisfy a given value range of a census feature
  // Example 1: Retrieve all states where (population >= 1,000,000)
  // Example 2: Retrieve all counties where (median household income < $50,000/year)
  rpc ExecuteTargetedQuery(TargetedQueryRequest) returns (TargetedQueryResponse) {}
}

message SpatialRequest {
  CensusResolution censusResolution = 1;
  CensusFeature censusFeature = 2;
  string requestGeoJson = 3;   // bounding polygon
  SpatialOp spatialOp = 4;
}

message SpatialResponse {
  repeated SingleSpatialResponse singleSpatialResponse = 1;
}

message SingleSpatialResponse {
  string data = 1;
  string responseGeoJson = 2;   // geoJson associated with 'data'
}

enum SpatialOp {
  GeoWithin = 0;
  GeoIntersects = 1;
}

enum CensusFeature {
  TotalPopulation = 0;
  MedianHouseholdIncome = 1;
  PopulationByAge = 2;
  MedianAge = 3;
  Poverty = 4;
  Race = 5;
}

message RaceRequest {
  SpatialTemporalInfo spatialTemporalInfo = 1;
}

message RaceResponse {
  int32 white = 1;
  int32 black = 2;
  int32 americanIndianAndAlaskaNative = 3;
  int32 asianAndPacificIslanderAndOther = 4;
}

message PovertyRequest {
  SpatialTemporalInfo spatialTemporalInfo = 1;
}

message PovertyResponse {
  int32 incomeBelowPovertyLevel = 1;
  int32 incomeAtOrAbovePovertyLevel = 2;
}

message TotalPopulationRequest {
  SpatialTemporalInfo spatialTemporalInfo = 1;
}

message PopulationByAgeRequest {
  SpatialTemporalInfo spatialTemporalInfo = 1;
}

message MedianAgeRequest {
  SpatialTemporalInfo spatialTemporalInfo = 1;
}

message MedianHouseholdIncomeRequest {
  SpatialTemporalInfo spatialTemporalInfo = 1;
}

// geographic information included in every CensusRequest
message SpatialTemporalInfo {
  string resolution = 1; // Example:- 'state', 'county', 'tract'
  oneof SpatialInfo {
    SingleCoordinate singleCoordinate = 2;
    BoundingBox boundingBox = 3;
  }
  Decade decade = 4;
}

message BoundingBox {
  double x1 = 1;
  double y1 = 2;
  double x2 = 3;
  double y2 = 4;
}

message SingleCoordinate {
  double latitude = 1;
  double longitude = 2 ;
}

message TotalPopulationResponse {
  double population = 1;
}

message MedianAgeResponse {
  double medianAge = 1;
}

message MedianHouseholdIncomeResponse {
  double medianHouseholdIncome = 1;
}

message PopulationByAgeResponse {
  MaleAgeCategories maleAgeCategories = 1;
  FemaleAgeCategories femaleAgeCategories = 2;
}

message MaleAgeCategories {
  AgeCategories ageCategories = 1;
}

message FemaleAgeCategories {
  AgeCategories ageCategories = 2;
}

message AgeCategories {
  int32 total = 1;
  int32 under5 = 2;
  int32 cat5to9 = 3;
  int32 cat10to14 = 4;
  int32 cat15to17 = 5;
  int32 cat18to19 = 6;
  int32 cat20 = 7;
  int32 cat21 = 8;
  int32 cat22to24 = 9;
  int32 cat25to29 = 10;
  int32 cat30to34 = 11;
  int32 cat35to39 = 12;
  int32 cat40to44 = 13;
  int32 cat45to49 = 14;
  int32 cat50to54 = 15;
  int32 cat55to59 = 16;
  int32 cat60to61 = 17;
  int32 cat62to64 = 18;
  int32 cat65to66 = 19;
  int32 cat67to69 = 20;
  int32 cat70to74 = 21;
  int32 cat75to79 = 22;
  int32 cat80to84 = 23;
  int32 cat85andOver = 24;
}

message GeographicInfo {
  // TODO: include GeographicInfo in every CensusResponse
  string geoId = 1;
  string resolution = 2;
}

message TargetedQueryRequest {
  CensusResolution resolution = 1;
  Predicate predicate = 2;
}

message TargetedQueryResponse {
  CensusResolution resolution = 1;
  message SpatialInfo {
    sint32 geoId = 1;
    string name = 2;
  }
  repeated SpatialInfo spatialInfo = 2;
}

enum CensusResolution {
  State = 0;
  County = 1;
  Tract = 2;
}

enum Decade {
  ten2010 = 0;
  zero2000 = 1;
  nineteen1990 = 2;
  nineen1980 = 3;
}

message Predicate {
  enum ComparisonOperator {
    EQUAL = 0;
    GREATER_THAN = 1;
    LESS_THAN = 2;
    GREATER_THAN_OR_EQUAL = 3;
    LESS_THAN_OR_EQUAL = 4;
  }
  Feature feature = 1;
  Decade decade = 2;
  enum Feature {
    Population = 0;
    Income = 1;
    Race = 2;
  }
  ComparisonOperator comparisonOp = 3;
  double comparisonValue = 4;
}

message CustomHttpPattern {
  string kind = 1;

  string path = 2;
}

message HttpRule {
  string selector = 1;

  oneof pattern {
    string get = 2;

    string put = 3;

    string post = 4;

    string delete = 5;

    string patch = 6;

    CustomHttpPattern custom = 8;
  }

  string body = 7;

  string response_body = 12;

  repeated HttpRule additional_bindings = 11;
}

message Http {
  repeated HttpRule rules = 1;

  bool fully_decode_reserved_expansion = 2;
}
